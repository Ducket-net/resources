name: Scheduled Node Command

on:
  schedule:
    - cron: "0 14 * * *" # This schedule runs at 11 AM ET (1 PM UTC) every day
  workflow_dispatch:

jobs:
  run-node-command:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }} # Use the new secret here instead of GITHUB_TOKEN

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 19 # Specify the Node.js version you want to use

      - name: Install dependencies
        run: |
          npm ci
          ls
          cd ./icon_loader/ && npm ci

      - name: Get latest external variables ID
        id: get-external-id
        run: |
          # Create a Node.js script to fetch the latest external variables ID
          cat << 'EOF' > get-external-id.js
          const https = require('https');
          const { URL } = require('url');
          
          async function getLatestExternalId() {
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'habbo.com',
                path: '/gamedata/external_variables/0',
                method: 'HEAD', // Use HEAD to get just headers
                timeout: 10000
              };
              
              const req = https.request(options, (res) => {
                if (res.statusCode === 302 || res.statusCode === 301) {
                  // Extract ID from redirect location
                  const location = res.headers.location;
                  if (location) {
                    const url = new URL(location, 'https://habbo.com');
                    const pathParts = url.pathname.split('/');
                    const id = pathParts[pathParts.length - 1];
                    resolve(id);
                  } else {
                    reject(new Error('No redirect location found'));
                  }
                } else if (res.statusCode === 200) {
                  // If no redirect, try to get the ID from the current URL
                  // This might happen if /0 doesn't redirect
                  // In this case, we'll need to fetch the content and parse it differently
                  reject(new Error('No redirect found, may need alternative method'));
                } else {
                  reject(new Error(`HTTP ${res.statusCode}`));
                }
              });
              
              req.on('error', reject);
              req.on('timeout', () => {
                req.destroy();
                reject(new Error('Request timeout'));
              });
              
              req.end();
            });
          }
          
          // Alternative method: fetch content and extract from flash.client.url
          async function getIdFromContent() {
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'habbo.com',
                path: '/gamedata/external_variables/0',
                method: 'GET',
                timeout: 10000
              };
              
              const req = https.request(options, (res) => {
                let data = '';
                
                res.on('data', chunk => {
                  data += chunk;
                });
                
                res.on('end', () => {
                  try {
                    // Look for flash.client.url to extract the assets ID
                    const flashMatch = data.match(/flash\.client\.url=.+(flash-assets-[^/]+)/mi);
                    if (flashMatch) {
                      const assetsId = flashMatch[1];
                      console.log('Found assets ID:', assetsId);
                    }
                    
                    // For external variables, we need to find a pattern that gives us the current version
                    // Try to extract from any version references in the content
                    const versionMatch = data.match(/([a-f0-9]{40})/g);
                    if (versionMatch && versionMatch.length > 0) {
                      // Take the first 40-character hex string (likely a hash)
                      resolve(versionMatch[0]);
                    } else {
                      reject(new Error('Could not extract external variables ID from content'));
                    }
                  } catch (error) {
                    reject(error);
                  }
                });
              });
              
              req.on('error', reject);
              req.on('timeout', () => {
                req.destroy();
                reject(new Error('Request timeout'));
              });
              
              req.end();
            });
          }
          
          async function main() {
            try {
              console.log('Trying redirect method...');
              const id = await getLatestExternalId();
              console.log('External Variables ID:', id);
              console.log(`EXTERNAL_ID=${id}`);
            } catch (error) {
              console.log('Redirect method failed:', error.message);
              console.log('Trying content extraction method...');
              try {
                const id = await getIdFromContent();
                console.log('External Variables ID:', id);
                console.log(`EXTERNAL_ID=${id}`);
              } catch (contentError) {
                console.error('Both methods failed:', contentError.message);
                process.exit(1);
              }
            }
          }
          
          main();
          EOF
          
          # Run the script and capture the output
          EXTERNAL_ID=$(node get-external-id.js | grep "EXTERNAL_ID=" | cut -d'=' -f2)
          echo "Found External ID: $EXTERNAL_ID"
          echo "external-id=$EXTERNAL_ID" >> $GITHUB_OUTPUT
          
          # Clean up the temporary script
          rm get-external-id.js

      - name: Run Node command with dynamic ID
        run: |
          EXTERNAL_ID="${{ steps.get-external-id.outputs.external-id }}"
          echo "Using External Variables ID: $EXTERNAL_ID"
          npx shroom dump --url "https://habbo.com/gamedata/external_variables/$EXTERNAL_ID" --location ./
          cd ./icon_loader/ && npx hdl -c ficons

      - name: Compile Sprites
        working-directory: ./atlas_loader/
        run: |
          npm ci
          npm run start

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Commit and push changes
        run: |
          git add .
          git diff-index --quiet HEAD || (git commit -m "GitHub Actions: Update downloaded files" && git push --force)
